<template>
  <div>
    <!--  -->
    <a-row type="flex" justify="start" align="middle" style="height: 48px">
      <a-col style="height: 100%" :span="6">
        <a-upload
          name="file"
          :multiple="true"
          :showUploadList="false"
          :customRequest="uploadImage"
          :beforeUpload="beforeUpload"
          @change="handleChange"
        >
          <!-- @change="handleChange" -->
          <a-button size="small"> <a-icon type="upload" />选择图片 </a-button>
        </a-upload>
      </a-col>
      <a-col style="height: 100%" :span="6">
        <a-button
          style="width: 30%"
          size="small"
          type="primary"
          @click="configTask()"
        >
          上传
        </a-button>
      </a-col>
      <a-col :span="6"> </a-col>
      <a-col style="height: 100%" :span="6">
        <a-button style="width: 30%" type="primary" size="small">
          删除
        </a-button>
      </a-col>
    </a-row>
    <!----- 任务组的表格 ----->
    <a-table
      :row-selection="{
        selectedRowKeys: selectedRowKeys,
        onChange: onSelectChange,
      }"
      :rowKey="(record) => record.id"
      :columns="columns"
      size="small"
      :data-source="dataSource"
      :pagination="pagination"
      show-overflow-tooltip
      :customRow="customRow"
    >
      <!--   -->
      <span slot="num" slot-scope="text, record, index">
        {{
          (pagination.current - 1) * pagination.pageSize + parseInt(index) + 1
        }}
      </span>
      <!-- 钩子函数 -->
      <span slot="taskState" slot-scope="text">
        <a-tag :color="text == 1 ? 'red' : 'green'">
          {{ text == 1 ? "未上传" : "有效" }}
        </a-tag>
      </span>
      <span slot="action" slot-scope="text, record, index">
        <a @click="showDrawer(index)">详情</a>
        <a-divider type="vertical" />
        <!-- <a @click="distributeTask(record.key,record.taskName)">派发</a> -->
        <!-- <a-divider type="vertical"/> -->
        <a @click="deleteItem(record.key)">删除</a>
        <a-divider type="vertical" />
        <a @click="Editshow(index)">修改</a>
      </span>
    </a-table>

    <!-- 修改任务对话框  -->
    <a-modal
      v-model="editVisible"
      title="修改任务"
      ok-text="确认修改"
      cancel-text="取消"
      @ok="Edit"
    >
      <!-- :model="distributeTaskData" v-model="remark"-->
      <a-form-model>
        <a-form-model-item>
          <a-upload
            name="file"
            :multiple="true"
            :showUploadList="false"
            :customRequest="uploadImage"
            :beforeUpload="beforeUpload"
            @change="editChange"
          >
            <!-- @change="handleChange" -->
            <a-button size="small"> <a-icon type="upload" />选择图片 </a-button>
          </a-upload>
        </a-form-model-item>

        <a-form-model-item label="任务名">
          <a-input @change="getTaskName" />
        </a-form-model-item>

        <a-form-model-item label="备注">
          <a-input @change="getTaskRemark" />
        </a-form-model-item>
      </a-form-model>
    </a-modal>
    <!--   设置抽屉的样式  :closable="false"  -->
    <a-drawer
      title="任务详情"
      placement="right"
      :visible="visible"
      width="50%"
      :after-visible-change="afterVisibleChange"
      @close="onClose"
    >
      <a-form-model
        style="width: 100%"
        :model="diagResults"
        :label-col="labelCol"
        :wrapper-col="wrapperCol"
      >
        <a-form-model-item label="所属任务">
          <a-input v-model="diagResults.taskName" :disabled="disabled" />
        </a-form-model-item>
        <a-form-model-item label="照片状态">
          <a-tag
            :disabled="disabled"
            style="width: 100%"
            :color="diagResults.taskState == 1 ? 'green' : 'volcano'"
          >
            {{ diagResults.taskState == 1 ? "正常" : "异常" }}
          </a-tag>
        </a-form-model-item>
        <a-list
          :grid="{ gutter: 16 }"
          justify="space-around"
          style="margin: 16px"
        >
          <a-list-item>
            <a-card>
              <a-row type="flex" justify="space-around">
                <a-col justify="space-around">
                  <a-avatar
                    shape="square"
                    :size="200"
                    :src="diagResults.devicePic"
                  />
                </a-col>
                <a-col>
                  <a-avatar
                    shape="square"
                    :size="200"
                    :src="diagResults.deviceRedPic"
                  />
                </a-col>
              </a-row>
              <a-row style="margin-top: 5px" type="flex" justify="space-around">
                <a-col justify="space-around">
                  <a-avatar
                    shape="square"
                    :size="200"
                    :src="diagResults.nameplatePic"
                  />
                </a-col>
                <a-col>
                  <a-avatar
                    shape="square"
                    :size="200"
                    :src="diagResults.nameplateRedPic"
                  />
                </a-col>
              </a-row>
            </a-card>
          </a-list-item>
        </a-list>
        <a-form-model-item label="备注">
          <a-input v-model="diagResults.remark" :disabled="disabled" />
        </a-form-model-item>
      </a-form-model>
    </a-drawer>
  </div>
</template>

<script>
import Task from "../../netapi/task";

const columns = [
  {
    title: "序号",
    dataIndex: "num",
    scopedSlots: { customRender: "num" },
  },
  {
    title: "所属任务组",
    dataIndex: "belongTaskGroup",
  },
  {
    title: "任务名",
    dataIndex: "taskName",
  },
  {
    title: "创建时间",
    dataIndex: "createTime",
  },
  {
    title: "状态",
    dataIndex: "taskState",
    scopedSlots: { customRender: "taskState" },
  },
  {
    title: "管理",
    key: "Action",
    scopedSlots: { customRender: "action" },
  },
];
var diagResults = {
  taskName: "",
  taskState: "",
  createTime: "",
  autoAdvice: "",
  devicePic: "",
  deviceRedPic: "",
  nameplatePic: "",
  nameplateRedPic: "",
  remark: "",
  // remark:'这是一串长长的任务备注，用以显示额外信息'
};

export default {
  name: "CreateTask",

  data() {
    return {
      dataSource: [], //数据源
      columns,
      pagination: {},
      visible: false,
      editVisible: false,
      selectedRowKeys: [], // Check here to configure the default column
      ids: [],
      groupTaskVisible: false,
      groupTaskViewVisible: false,
      distributeVisible: false,
      fileList: [],
      editFileList:[],
      TaskRemark:'',
      taskId:'',
      TaskName:"",
      group: {
        groupName: "",
        remark: "",
      },
      distributeTaskData: {
        taskName: "",
        executeUser: "",
      },
      disabled: true,
      labelCol: { span: 4 },
      wrapperCol: { span: 14 },
      diagResults,
    };
  },

  computed: {
    hasSelected() {
      return this.selectedRowKeys.length > 0;
    },
  },

  mounted() {
    this.refresh();
  },

  methods: {
    //设置抽屉的可见性
    afterVisibleChange(val) {
      // console.log('visible', val);
    },
    //点击table行的时候可触发的事件
    customRow(record, index) {
      return {
        on: {
          click: (event) => {
            // this.visible = true;
            //  console.log('messege');
            // console.log('-------------------------');
            // console.log(index);
          },
        },
      };
    },
    // 显示详情
    showDrawer(index) {
      this.visible = true;
      // console.log(this.dataSource[index]);
      var data = this.dataSource[index];
      // console.log(data.taskName);
      this.diagResults.taskName = data.taskName;
      this.diagResults.taskState = data.taskState;
      this.diagResults.createTime = data.createTime;
      this.diagResults.devicePic = "http://192.168.1.201:8900/1.jpg";
      // console.log( this.diagResults.devicePic);
      // data.deviceRedPic/data.devicePic/data.nameplatePic/data.nameplateRedPic
      this.diagResults.deviceRedPic = "http://192.168.1.201:8900/2.jpg";
      this.diagResults.nameplatePic = "http://192.168.1.201:8900/3.jpg";
      this.diagResults.nameplateRedPic = "http://192.168.1.201:8900/4.jpg";
      this.diagResults.remark = data.remark;
    },

    onClose() {
      this.visible = false;
    },

    handleChange(info) {
      this.fileList = info.fileList;
      const status = info.file.status; //如果已经上传完就获取已经上传的文件
      // console.log(info.fileList.length);
      if (status !== "uploading") {
        console.log(info.file);
        console.log(info.fileList);
      }
    },

    //长传头像前校验
    beforeUpload(file) {
      const isJpgOrPng =
        file.type === "image/jpeg" ||
        file.type === "image/jpg" ||
        file.type === "image/png";
      if (!isJpgOrPng) {
        this.$message.error("只能上传jpg/png格式的头像!");
      }
      const isLt2M = file.size / 1024 / 1024 < 2;
      if (!isLt2M) {
        this.$message.error("图片不得大于2MB!");
      }
      return isJpgOrPng && isLt2M;
    },

    //上传照片列表
    uploadImage(file) {
      this.avatarLoading = true;
      const formData = new FormData();
      // console.log(this.fileList);
      // console.log(file.file);
      formData.append("file", file.file);
      // console.log( file);
      // api.upload(formData).then(
      //   (res) => {
      //     if (res) {
      //       this.imageUrl = res.data.data.link;
      //       this.saveAvatar(); // 保存新头像
      //       this.avatarLoading = false;
      //     }
      //   },
      //   (err) => {
      //     this.avatarLoading = false;
      //   }
      // );
    },

    //反馈已经被选择到的数据项
    onSelectChange(selectedRowKeys) {
      // console.log("selectedRowKeys changed: ", selectedRowKeys);
      this.selectedRowKeys = selectedRowKeys;
      // console.log(this.selectedRowKeys);
    },
    //确认提交任务
    configTask() {
      var t = this;
      //  console.log(this.selectedRowKeys[0]);
      for (var i = 0; i < this.selectedRowKeys.length; i++)
        Task.configTaskG({
          taskId: this.selectedRowKeys[i],
        }).then((r) => {
          t.refresh();
          //  console.log(r);
        });
    },

    createGroupTask() {
      this.groupTaskVisible = true;
    },

    createGroupTaskConfirm() {
      this.$message.info("创建成功！");
      this.groupTaskVisible = false;
    },

    deleteItem(id) {
      const par = this;
      this.$confirm({
        title: "确认删除这个任务?",
        okText: "确认",
        okType: "danger",
        cancelText: "取消",
        onOk() {
          //  const dataSource = [...par.dataSource];
          //  this.dataSource = dataSource.filter((item) => item.id !== id);
          par.$message.success("删除任务" + id + "成功。");
        },
        onCancel() {
          par.$message.error("删除失败！");
        },
      });
    },
    //修改任务信息
    Editshow(index){
      this.editVisible = true;
       this.taskId = this.dataSource[index].id;
      // var taskName = this.dataSource[index].taskName;
    },
    Edit() {
        Task.updateTaskG({
           files:this.editFileList,
           taskId:this.taskId,
           taskName:this.TaskName,
           remark:this.TaskRemark
        }).then(r=>{
          console.log(r);
        })
    },
    // 拿到上传的图片列表
    editChange(file) {
      this.editFileList = file.fileList;
       console.log(file.fileList);
    },
    // 拿到修改后的名称
    getTaskName(e){
      // console.log(e.target.value);
      this.TaskName = e.target.value;
    },
    // 拿到最新的备注
    getTaskRemark(e){
      // console.log(e.target.value);
      this.TaskRemark = e.target.value;

    },
    //载入数据
    refresh() {
      var userId = this.$cookies.get("loginId");
      this.pagination.current = 1;
      Task.getTaskPageG({
        userId: userId,
        state: 1,
      }).then((r) => {
        // console.log(r);
        var js = JSON.parse(r.result);
        // console.log(js.list);
        // 这里得到的数据就只有10个
        const pagination = { ...this.pagination }; //重新定义获取新的页面
        //  console.log(js);
        // 读取总的数据量是12个
        pagination.total = js.total;
        pagination.pageSize = js.pageSize;
        this.loading = false;
        this.dataSource = js.list; //把数据装进table里面
        // console.log(js.list);
        this.pagination = pagination; //获取
        // console.log(this.pagination);
      });
    },

    distributeTask(id, taskName) {
      this.distributeVisible = true;
      this.distributeTaskData.taskName = taskName;
    },

    showTaskGroup() {
      this.groupTaskViewVisible = true;
    },

    distributeTaskConfirm() {
      this.$message.info("派发成功！");
    },
  },
};
</script>

<style scoped>
* {
  margin: 0;
  padding: 0;
}
</style>

<template>
  <div>
    <a-row type="flex" justify="start" align="middle" class="search">
      <a-col>
        <a-input-search
          placeholder="按照报告名搜索"
          enter-button
          @search="onSearchByTaskGroupName"
        />
      </a-col>
      <a-col>
        <a-dropdown>
          <a-menu slot="overlay" @click="switchSortWay">
            <a-menu-item key="0">
              <a-icon type="right" />{{ sortWay[0] }}</a-menu-item
            >
            <a-menu-item key="1">
              <a-icon type="right" />{{ sortWay[1] }}</a-menu-item
            >
            <a-menu-item key="2">
              <a-icon type="right" />{{ sortWay[2] }}</a-menu-item
            >
            <a-menu-item key="3">
              <a-icon type="right" />{{ sortWay[3] }}</a-menu-item
            >
          </a-menu>
          <a-button style="margin-left: 8px">
            {{ currentWay }} <a-icon type="down" />
          </a-button>
        </a-dropdown>
      </a-col>
      <a-col style="margin-left: 8px">
        <a-button-group>
          <a-button @click="refreshThisPage" type="primary"> 刷新 </a-button>
        </a-button-group>
      </a-col>
    </a-row>
    <!-- @change="simplePageChange" -->
    <a-table
      style="margin-top: 8px"
      :pagination="pagination"
      :columns="columns"
      :data-source="data"
      :loading="loading"
      @change="handleTableChange"
      :rowKey="(record) => record.id"
    >
      <span slot="num" slot-scope="text, record, index">
        {{
          (pagination.current - 1) * pagination.pageSize + parseInt(index) + 1
        }}
      </span>
       <span slot="type" slot-scope="text">
        {{ text == 1 ? "默认":"选择" }}
      </span>
      
      <span slot="modelType" slot-scope="text">
        {{ text == 1 ? "模板类型一" : text == 2 ? "模板类型二" : "已删除" }}
      </span>
      <span slot="action" slot-scope="text, record, index">
        <a-button
          type="primary"
          size="small"
          @click="downLoadFile(index)"
          :disabled="record.state !== 2"
        >
          {{ record.state === 1 ? "生成中" : "下载" }}
        </a-button>
      </span>
    </a-table>
  </div>
</template>

<script>
const columns = [
  {
    title: "序号",
    dataIndex: "num",
    scopedSlots: { customRender: "num" },
  },
  {
    title: "报告名",
    dataIndex: "name",
  },
  {
    title: "报告类型",
    dataIndex: "type",
      scopedSlots: { customRender: "type" },
  },
  {
    title: "模板类型",
    dataIndex: "modelType",
    scopedSlots: { customRender: "modelType" },
  },
  {
    title: "下载",
    key: "state",
    scopedSlots: { customRender: "action" },
  },
];

import Report from "../../netapi/report";

export default {
  name: "reportShow",
  data() {
    return {
      columns,
      data: [],
      pagination: {},
      loading: false,
      currentWay: "默认排序",
      sortWay: ["默认排序", "已生成", "正在生成", "已失效"],
    };
  },
  methods: {
    /**
     * 下载文件 todo
     * @param id 对应报告id
     **/
    downLoadFile(index) {
      var t = this;
      var fileName = "文件" + index + 1;
      let config = {
        responseType: "arraybuffer",
      };
      let param = {
        reportId: this.data[index].id,
      };
      this.$axios({
        url: "http://81.68.252.160:8891/Report/getReportFileById",
        methods: "get",
        params: {
          reportId: this.data[index].id,
        },
        responseType: "arraybuffer",
      }).then((data) => {
         if (data.status == 200) {
              const url = window.URL.createObjectURL(new Blob([data.data]));
              const link = document.createElement("a");
              link.href = url;
              link.setAttribute("download", "demo.doc");
              document.body.appendChild(link);
              link.click();
              URL.revokeObjectURL(link.href); //释放url
              document.body.removeChild(link); //释放标签
            }else{
                  this.$message.error("下载失败");
            }
     
      });
     
    },
    downLoad(data, fileName) {
      if (!data) {
        return;
      }
      let url = window.URL.createObjectURL(new Blob([data]));
      let link = document.createElement("a");
      link.style.display = "none";
      link.href = url;
      link.setAttribute("download", fileName);
      document.body.appendChild(link);
      link.click();
    },
    /**
     * 根据报告名进行搜索
     * @param value 搜索字符
     **/
    onSearchByTaskGroupName(value) {},
    /**
     * 获取页面数据
     **/
    refreshThisPage() {
      this.pagination.current = 1;
      Report.getReportPage({
        userId: this.$cookies.get("loginId"),
        state: -1,
        type: -1,
      })
        .then((data) => {
          //  console.log(data.result);
          if (data.code === "200") {
            // 循环执行生成对象
            let result = JSON.parse(data.result);
            // 这里得到的数据就只有10个
            const pagination = { ...this.pagination }; //重新定义获取新的页面
            //  console.log(pagination);
            // 读取总的数据量是12个
            pagination.total = result.total;
            pagination.pageSize = result.pageSize;
            // pagination.current = js.current;
            this.loading = false;
            this.data = result.list; //把数据装进table里面
            // console.log(js);
            this.pagination = pagination; //获取
          } else {
            this.$message.info(data.message);
          }
        })
        .catch((err) => {
          this.$message.error(this.NETWORK_ERROR_MESSAGE);
          // console.log(err);
        });
    },

    /**
     *点击某一页面时，网页加载到当前的数据
     **/
    handleTableChange(pagination, filters, sorter) {
      const pager = { ...this.pagination };
      pager.current = pagination.current;
      this.pagination = pager;
      Report.getReportPage({
        page: this.pagination.current,
        userId: this.$cookies.get("loginId"),
        state: -1,
        type: -1,
      }).then((r) => {
        var js = JSON.parse(r.result);
        // 这里得到的数据就只有10个
        const pagination = { ...this.pagination }; //重新定义获取新的页面
        // 读取总的数据量是12个
        pagination.total = js.total;
        this.loading = false;
        this.data = js.list; //把数据装进table里面
        this.pagination = pagination; //获取
      });
    },

    /**
     * 切换任务排序方式
     * @param way 排序方式
     */
    switchSortWay(way) {
      this.currentWay = this.sortWay[way.key];
    },
  },
  created() {
    // 进入此页面即获取页面数据
    this.refreshThisPage();
  },
};
</script>

<style scoped>
</style>
